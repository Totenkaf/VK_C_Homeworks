on: push

jobs:
  installing-environment:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: WORKING DIRECTORY
        run: pwd
      # - name: INSTALL GCC
      #   run: |
      #     sudo apt-get update && sudo apt-get install -y gcc g++
      #     which gcc
      # - name: INSTALL LCOV
      #   run: |
      #     sudo apt-get update && sudo apt-get install -y lcov
      #     which lcov
      # - name: INSTALL PIP
      #   run: |
      #     sudo apt-get update && sudo apt-get install -y python3-pip
      #     which python3
      #     which pip
      # - name: INSTALL VALGRIND
      #   run: |
      #     sudo apt-get update && sudo apt-get install -y valgrind
      #     which valgrind
      # - name: INSTALL CMAKE
      #   run: |
      #     sudo apt-get update && sudo apt-get install -y cmake
      #     which cmake
      # - name: INSTALL CLANG-FORMAT
      #   run: |
      #     sudo apt-get update && sudo apt-get install -y clang-format
      #     which clang-format
      # - name: INSTALL CLANG-TIDY
      #   run: |
      #     sudo apt-get update && sudo apt-get install -y clang-tidy
      #     which clang-tidy
      # - name: INSTALL CPPLINT
      #   run: |
      #     sudo apt-get update && sudo pip install cpplint
      #     which cpplint
      # - name: INSTALL FBINFER
      #   run: |
      #     VERSION=1.0.0; \
      #       curl -sSL "https://github.com/facebook/infer/releases/download/v$VERSION/infer-linux64-v$VERSION.tar.xz" \
      #       | sudo tar -C /opt -xJ && \
      #       sudo ln -s "/opt/infer-linux64-v$VERSION/bin/infer" /usr/local/bin/infer
      - name: INSTALL GTEST
        run:  |
          git clone https://github.com/google/googletest
          cd ./googletest
          mkdir -p build && cd build
          sudo cmake ..
          sudo make
          sudo make install
          cd ../




# jobs:
#   check:
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@v2 
#       - run: make check
#   build:
#     runs-on: ubuntu-latest
#     needs: [check]
#     steps:
#     - uses: actions/checkout@v2 
#     - run: make build
#     - name: Upload artifacts
#       uses: actions/upload-artifact@v2
#       with:
#         path: main.out
#   test:
#     runs-on: ubuntu-latest
#     needs: [build]
#     steps:
#       - uses: actions/checkout@v2 
#       - run: make test




#   steps:
# - uses: actions/checkout@v2
# - uses: codecov/codecov-action@v2
#   with:
#     files: ./coverage1.xml,./coverage2.xml # optional
#     name: codecov-umbrella
#     fail_ci_if_error: true
#     verbose: true








# # Copyright 2022 by Artem Ustsov
# # Use the latest 2.1 version of CircleCI pipeline process engine.
# version: 2.1
# orbs:
#   codecov: codecov/codecov@3.2.0

# jobs:
#   build:
#     docker:
#       - image: "buildpack-deps:focal"

#     working_directory: ~/project
#     steps:
#       - checkout
#       - run:
#           name: "INSTALLING SUDO"
#           command: 'apt-get update -qq && apt-get install -y sudo && rm -rf /var/lib/apt/lists/*'

#       - run:
#           name: "INSTALLING GCC"
#           command: |
#             apt-get update && apt-get install -y gcc g++
#             which gcc

#       - run:
#           name: "INSTALLING LCOV"
#           command: 'apt-get update && apt-get install -y lcov'

#       - run:
#           name: "INSTALLING PIP"
#           command: 'apt-get update && sudo apt-get install -y python3-pip'

#       - run:
#           name: "INSTALLING VALGRIND"
#           command: 'apt-get update && apt-get install -y valgrind'

#       - run:
#           name: "INSTALLING CMAKE"
#           command: 'apt-get update && sudo apt-get install -y cmake'

#       - run:
#           name: "INSTALLING CLANG-FORMAT"
#           command: 'apt-get update && sudo apt-get install -y clang-format'

#       - run:
#           name: "INSTALLING CLANG-TIDY"
#           command: 'apt-get update && sudo apt-get install -y clang-tidy'

#       - run:
#           name: "INSTALLING CPPLINT"
#           command: 'apt-get update && sudo pip install cpplint'

      # - run:
      #     name: "INSTALLING INFER"
      #     command: |
      #       VERSION=1.0.0; \
      #       curl -sSL "https://github.com/facebook/infer/releases/download/v$VERSION/infer-linux64-v$VERSION.tar.xz" \
      #       | sudo tar -C /opt -xJ && \
      #       sudo ln -s "/opt/infer-linux64-v$VERSION/bin/infer" /usr/local/bin/infer

#       - run:
#           name: "INSTALLING GTEST"
#           command: |
#             git clone https://github.com/google/googletest
#             cd ~/project/googletest
#             mkdir -p ~/project/googletest/build
#             cd ~/project/googletest/build
#             sudo cmake ..
#             make
#             make install
#             cd ~/project

#       - run:
#           name: "GITCHECK"
#           command: |
#             if [[ -n $(git diff --check HEAD^) ]]; then
#               echo "You must remove whitespace before submitting a pull request"
#               echo ""
#               git diff --check HEAD^
#               exit -1
#             fi

#       - run:
#           name: "CLANG FORMATING"
#           command: |
#             mkdir -p ~/project/build
#             cd ~/project/build
#             cmake -DENABLE_CLANG_FORMAT=ON ..
#             make
#             make clang-format

#       - run:
#           name: "CLANG TIDY CHECK"
#           command: |
#             mkdir -p ~/project/build
#             cd ~/project/build
#             cmake -DENABLE_CLANG_TIDY=ON ..
#             make
#             make tidy > output.txt
#             if [[ -n $(grep "warning: " output.txt) ]] || [[ -n $(grep "error: " output.txt) ]]; then
#                 echo "You must pass the clang tidy checks before submitting a pull request"
#                 echo ""
#                 grep --color -E '^|warning: |error: ' output.txt
#                 exit -1;
#             else
#                 echo -e "\033[1;32m\xE2\x9C\x93 passed:\033[0m $1";
#             fi

#       - run:
#           name: "CPPLINT"
#           command: |
#             mkdir -p ~/project/build
#             cd ~/project/build
#             cmake -DENABLE_CPPLINT=ON ..
#             make
#             make cpplint

#       - run:
#           name: "INFER CHECK"
#           command: |
#             mkdir -p ~/project/build
#             cd ~/project/build
#             sudo apt install libncurses5 -y
#             cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=1 -DENABLE_STRESS_TEST=ON -DBUILD_TESTS=ON -DENABLE_INFER=ON ..
#             make infer

#       - run:
#           name: "VALGRIND CREATION CHECK"
#           command: |
#             mkdir -p ~/project/build
#             cd ~/project/build
#             cmake ..
#             make
#             FILE_NAME="test.txt"
#             valgrind --tool=memcheck --leak-check=full --leak-resolution=med ./run_creation ${FILE_NAME}
#             rm test.txt

#       - run:
#           name: "VALGRIND CONSECUTIVE CHECK"
#           command: |
#             mkdir -p ~/project/build
#             cd ~/project/build
#             cmake ..
#             make
#             MATRIX_COLS=5
#             MATRIX_ROWS=10
#             FILE_NAME="test.txt"
#             ./run_creation ${MATRIX_COLS} ${MATRIX_ROWS} ${FILE_NAME}
#             valgrind --tool=memcheck --leak-check=full --leak-resolution=med ./run_consecutive ${FILE_NAME}
#             rm test.txt

#       - run:
#           name: "UNIT TESTS CHECK"
#           command: |
#             mkdir -p ~/project/build
#             cd ~/project/build
#             cmake -DBUILD_TESTS=ON
#             make
#             ./run_consecutive_st ${COLS} ${ROWS} ${FILE_NAME} "consecutive_4x6.txt"
#             ./run_parallel_st ${COLS} ${ROWS} ${FILE_NAME} "parallel_4x6.txt"
#             make test

#       - run:
#           name: "ADDRESS SANITIZER"
#           command: |
#             mkdir -p ~/project/build
#             cd ~/project/build
#             cmake -DBUILD_TESTS=ON -DENABLE_ASAN=ON -DENABLE_USAN=OFF -DENABLE_TSAN=OFF ..
#             make
#             make test

#       - run:
#           name: "UNDEFINED SANITIZER"
#           command: |
#             mkdir -p ~/project/build
#             cd ~/project/build
#             cmake -DENABLE_ASAN=OFF -DENABLE_USAN=ON -DENABLE_TSAN=OFF ..
#             make
#             make test

#       - run:
#           name: "THREAD SANITIZER"
#           command: |
#             mkdir -p ~/project/build
#             cd ~/project/build
#             cmake -DBUILD_TESTS=ON -DENABLE_ASAN=OFF -DENABLE_USAN=OFF -DENABLE_TSAN=ON ..
#             make
#             make test

#       - run:
#           name: "CODECOV CHECK"
#           command: |
#             mkdir -p ~/project/build
#             cd ~/project/build
#             cmake -DBUILD_TESTS=ON -DENABLE_STRESS_TEST=ON -DENABLE_COVERAGE=ON ..
#             make
#             FILE_NAME=test.txt
          
#             ./run_creation ${FILE_NAME}
#             ./run_consecutive_st ${MATRIX_COLS} ${MATRIX_ROWS} ${FILE_NAME} ${OUTPUT_PATH}
#             make test
#             lcov --directory . --capture --output-file coverage.info
#             lcov --remove coverage.info '/usr/*' "${HOME}" '/.cache/*' --output-file coverage.info
#             lcov --list coverage.info
#             rm output.txt
#             cd ..
#             bash <(curl -s https://codecov.io/bash) -f build/coverage.info || echo "CodeCov didn't collect coverage reports"
#             cat codecov.yml | curl --data-binary @- https://codecov.io/validate
